/**********************************************************************
 * Project: Smart Building Monitor (Ultrasonic + MPU6050)
 * 
 * Description:
 * This IoT-based system monitors both the distance (in mm) and tilt of a 
 * structure or object in real-time. It provides alerts via Telegram 
 * messages if abnormal conditions are detected.
 * 
 * Components:
 * 1. ESP32 Microcontroller - main controller, handles sensors and WiFi.
 * 2. Ultrasonic Sensor (HC-SR04) - measures distance to object.
 * 3. MPU6050 - accelerometer and gyroscope to detect tilt.
 * 4. WiFi + Telegram Bot - sends instant notifications to the user.
**********************************************************************/
#include <Wire.h>
#include <MPU6050.h>
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include "time.h"

// === Hardware Objects ===
MPU6050 mpu;

// === Pins ===
#define TRIG_PIN 5
#define ECHO_PIN 18

// === WiFi & Telegram Config ===
const char* WIFI_SSID = "iPhone";
const char* WIFI_PASS = "12345678";
#define BOT_TOKEN "8488772079:AAE6CcS_jfcCRA6JuHZUn_ri2yGDR5nU11I"
const char* CHAT_ID = "1215468213";

WiFiClientSecure client;
UniversalTelegramBot bot(BOT_TOKEN, client);

// === NTP / Time Config ===
const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 28800; // Malaysia GMT+8
const int daylightOffset_sec = 0;

// === Thresholds in mm ===
const float DIST_WARNING_MM = 570;  // 57 cm -> 570 mm
const float DIST_CRITICAL_MM = 520; // 52 cm -> 520 mm
const float TILT_MIN_NORMAL = 82.0; // Tilt normal lower bound
const float TILT_MAX_NORMAL = 87.0; // Tilt normal upper bound

// === States ===
enum AlertLevel { NORMAL, WARNING, CRITICAL };
AlertLevel currentAlert = NORMAL;

// Timer for periodic Telegram
unsigned long lastTelegramTime = 0;
const unsigned long TELEGRAM_INTERVAL = 60000; // 60 sec
const unsigned long ALERT_COOLDOWN = 10000;    // 10 sec

// === Moving Average for Distance ===
#define FILTER_SIZE 5
float distanceBuffer[FILTER_SIZE];
int filterIndex = 0;
bool bufferFilled = false;

// === Function Prototypes ===
void sendTelegram(String msg);
float getUltrasonicDistanceMM();
float getTiltDeg();
float movingAverage(float newValue);
void ensureWiFi();
String getCurrentTime();

// ====================== Functions ======================
void sendTelegram(String msg) {
    Serial.println("üì≤ Sending Telegram...");
    if (bot.sendMessage(CHAT_ID, msg, "")) Serial.println("‚úÖ Sent");
    else Serial.println("‚ùå Failed");
}

// Ultrasonic distance in mm
float getUltrasonicDistanceMM() {
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);

    long duration = pulseIn(ECHO_PIN, HIGH, 30000); // timeout 30ms (~5m)
    float distance = duration * 0.343 / 2; // mm
    if (duration == 0) return -1; // no reading
    return distance;
}

// Tilt in degrees
float getTiltDeg() {
    int16_t ax, ay, az, gx, gy, gz;
    mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
    float axg = ax / 16384.0;
    float ayg = ay / 16384.0;
    float azg = az / 16384.0;
    float roll = atan2(ayg, azg) * 57.2958;
    float pitch = atan2(-axg, sqrt(ayg*ayg + azg*azg)) * 57.2958;
    return max(abs(roll), abs(pitch));
}

// Moving average filter
float movingAverage(float newValue) {
    distanceBuffer[filterIndex] = newValue;
    filterIndex = (filterIndex + 1) % FILTER_SIZE;
    if (filterIndex == 0) bufferFilled = true;

    int count = bufferFilled ? FILTER_SIZE : filterIndex;
    float sum = 0;
    for (int i = 0; i < count; i++) sum += distanceBuffer[i];
    return sum / count;
}

// Ensure WiFi connection
void ensureWiFi() {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("üîÑ Reconnecting WiFi...");
        WiFi.begin(WIFI_SSID, WIFI_PASS);
        unsigned long start = millis();
        while (WiFi.status() != WL_CONNECTED && millis() - start < 10000) {
            delay(500);
            Serial.print(".");
        }
        if (WiFi.status() == WL_CONNECTED) Serial.println("\n‚úÖ WiFi reconnected");
        else Serial.println("\n‚ùå WiFi failed");
    }
}

// Get current time HH:MM:SS
String getCurrentTime() {
    struct tm timeinfo;
    if (!getLocalTime(&timeinfo)) return "00:00:00";
    char buffer[9];
    strftime(buffer, 9, "%H:%M:%S", &timeinfo);
    return String(buffer);
}

// ====================== Setup ======================
void setup() {
    Serial.begin(115200);
    delay(1000);
    Wire.begin(21, 22);

    // Ultrasonic pins
    pinMode(TRIG_PIN, OUTPUT);
    pinMode(ECHO_PIN, INPUT);

    // MPU6050
    mpu.initialize();
    Serial.println(mpu.testConnection() ? "‚úÖ MPU6050 OK" : "‚ùå MPU6050 not found");

    // WiFi
    Serial.println("Connecting WiFi...");
    WiFi.begin(WIFI_SSID, WIFI_PASS);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\n‚úÖ WiFi connected");
    client.setInsecure();

    // NTP time
    configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
    Serial.println("‚è±Ô∏è Time synchronized via NTP");

    sendTelegram("üèóÔ∏è Smart Building Monitor (Ultrasonic) started ‚úÖ");
}

// ====================== Loop ======================
void loop() {
    ensureWiFi();

    // --- Distance Measurement ---
    float raw_distance = getUltrasonicDistanceMM();
    float distance_mm = (raw_distance > 0) ? movingAverage(raw_distance) : -1;

    // --- Tilt Measurement ---
    float tilt = getTiltDeg();

    // --- Debug print ---
    Serial.print("üìè Distance: ");
    if (distance_mm > 0) Serial.print(distance_mm);
    else Serial.print("Out of range");
    Serial.print(" mm | üìê Tilt: "); Serial.println(tilt);

    // --- Alert Logic ---
    AlertLevel newAlert = NORMAL;
    if (distance_mm > 0) {
        if (distance_mm < DIST_CRITICAL_MM) newAlert = CRITICAL;
        else if (distance_mm < DIST_WARNING_MM) newAlert = WARNING;
    }
    if (tilt < TILT_MIN_NORMAL || tilt > TILT_MAX_NORMAL) newAlert = CRITICAL;

    // Handle alert state change
    unsigned long now = millis();
    static unsigned long lastAlertChange = 0;
    if (newAlert != currentAlert && (now - lastAlertChange > ALERT_COOLDOWN)) {
        currentAlert = newAlert;
        lastAlertChange = now;
        lastTelegramTime = 0; // force immediate send
    }

    // --- Telegram messages ---
    if ((currentAlert == WARNING || currentAlert == CRITICAL) &&
        (now - lastTelegramTime > TELEGRAM_INTERVAL)) {
        lastTelegramTime = now;
        String msg = (currentAlert == WARNING) ? "‚ö†Ô∏è WARNING!\n" : "üö® CRITICAL!\n";
        msg += "üìè Distance: " + String(distance_mm, 1) + " mm\n";
        msg += "üìê Tilt: " + String(tilt, 1) + "¬∞\n";
        msg += "‚è±Ô∏è Time: " + getCurrentTime();
        sendTelegram(msg);
    }

    delay(200);
}
